"""
Django settings for OAuth2.org project.

Generated by 'django-admin startproject' using Django 2.1.1.

For more information on this file, see
https://docs.djangoproject.com/en/2.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.1/ref/settings/
"""

import os
import dj_database_url
from django.contrib.messages import constants as messages
from getenv import env
from django.utils.translation import ugettext_lazy as _
from .utils import bool_env

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env(
    'SECRET_KEY', '@+ttixefm9-bu1eknb4k^5dj(f1z0^97b$zan9akdr^4s8cc54')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = bool_env(env('DEBUG', True))

if DEBUG:
    # Never run a production system in DEBUG or with insecure transport turned off (i.e. http instead of https)
    os.environ['OAUTHLIB_INSECURE_TRANSPORT'] = '1'

ALLOWED_HOSTS = ['*', ]

# A function to install app only if they are installed.


def _enable_conditional(application):
    global INSTALLED_APPS
    try:
        __import__(application)
        INSTALLED_APPS += (application,)
    except ImportError:
        pass


# Application definition
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'oauth2_provider',
    'rest_framework',
    'apps.home',
    'apps.wellknown',
    'apps.verifymyidentity',
    'apps.accounts',
    'apps.testclient',
    'apps.api',  # Dummy CDA App
    'apps.fhirproxy',
    'apps.hie',
    'apps.provider_directory',
    # 'apps.adt',

    # 3rd Party ---------------------------------------------------
    'widget_tweaks',
    'corsheaders',
    'bootstrapform',
    'social_django',  # Python Social Auth
]

# Add djmongo if it is already installed.
_enable_conditional('djmongo')
_enable_conditional('djmongo.console')
_enable_conditional('djmongo.read')
_enable_conditional('djmongo.dataimport')
_enable_conditional('djmongo.write')
_enable_conditional('djmongo.aggregations')


MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'social_django.middleware.SocialAuthExceptionMiddleware',
]


ROOT_URLCONF = 'oauth2org.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'django_settings_export.settings_export',
                'social_django.context_processors.backends',
                'social_django.context_processors.login_redirect',
            ],
        },
    },
]

WSGI_APPLICATION = 'oauth2org.wsgi.application'


# Database
# https://docs.djangoproject.com/en/2.1/ref/settings/#databases

DATABASES = {
    'default': dj_database_url.config(
        default=env('DATABASES_CUSTOM',
                    'sqlite:///{}/db/db.sqlite3'.format(BASE_DIR))
    ),
}

MESSAGE_TAGS = {
    messages.DEBUG: 'debug',
    messages.INFO: 'info',
    messages.SUCCESS: 'success',
    messages.WARNING: 'warning',
    messages.ERROR: 'danger',
}


# Password validation
# https://docs.djangoproject.com/en/2.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': ('django.contrib.auth.password_validation.'
                 'UserAttributeSimilarityValidator')
    },
    {
        'NAME': ('django.contrib.auth.password_validation.'
                 'MinimumLengthValidator'),
    },
    {
        'NAME': ('django.contrib.auth.password_validation.'
                 'CommonPasswordValidator'),
    },
    {
        'NAME': ('django.contrib.auth.password_validation.'
                 'NumericPasswordValidator'),
    },
]

LOGOUT_REDIRECT_URL = 'home'


# Internationalization
# https://docs.djangoproject.com/en/2.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.1/howto/static-files/
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'sitestatic'),
]

STATIC_URL = '/static/'
MEDIA_URL = '/media/'
STATIC_ROOT = os.path.join(BASE_DIR, 'collectedstatic')
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')


# AWS Credentials need to support SES, SQS and SNS
AWS_ACCESS_KEY_ID = env('AWS_ACCESS_KEY_ID', 'change-me')
AWS_SECRET_ACCESS_KEY = env('AWS_SECRET_ACCESS_KEY', 'change-me')


# OAUTH SETTINGS
OAUTH2_PROVIDER = {
    'OAUTH2_VALIDATOR_CLASS': 'oauth2org.oauth2_validators.SingleAccessTokenValidator',
    'SCOPES': {"read": "Read scope",
               "patient/*.read": "Permission to read any resource for the current patient",
               "profile": "read the user's profile"},
    'DEFAULT_SCOPES': ['patient/*.read', 'profile'],
    'REQUEST_APPROVAL_PROMPT': 'auto',
    'ACCESS_TOKEN_EXPIRE_SECONDS': int(env('ACCESS_TOKEN_EXPIRE_SECONDS', 315360000))
}


AUTHENTICATION_BACKENDS = (
    # 'social_core.backends.google_openidconnect.GoogleOpenIdConnect',
    'apps.verifymyidentity.backends.verifymyidentity.VerifyMyIdentityOpenIdConnect',
    'django.contrib.auth.backends.ModelBackend',
)

CORS_ORIGIN_ALLOW_ALL = True

SOCIAL_AUTH_PIPELINE = [
    'social_core.pipeline.social_auth.social_details',
    'social_core.pipeline.social_auth.social_uid',
    'social_core.pipeline.social_auth.auth_allowed',
    'social_core.pipeline.social_auth.social_user',
    # Get the username as the sub in  OIDC
    'apps.verifymyidentity.pipeline.get_subject_id.get_username',
    'social_core.pipeline.user.create_user',
    'social_core.pipeline.social_auth.associate_user',
    'social_core.pipeline.social_auth.load_extra_data',
    'social_core.pipeline.user.user_details',
    'apps.accounts.pipeline.oidc.save_profile',
    'apps.fhirproxy.pipeline.identifiers_to_crosswalk.set_crosswalk_with_id_token',
    'apps.verifymyidentity.pipeline.save_profile.save_profile',
    'apps.verifymyidentity.pipeline.save_mrn.save_mrn',
]

if DEBUG:
    SOCIAL_AUTH_PIPELINE.append('social_core.pipeline.debug.debug')

SOCIAL_AUTH_VERIFYMYIDENTITY_OPENIDCONNECT_KEY = env(
    'SOCIAL_AUTH_VERIFYMYIDENTITY_OPENIDCONNECT_KEY',
    'oauth2org@verifymyidentity')
SOCIAL_AUTH_VERIFYMYIDENTITY_OPENIDCONNECT_SECRET = env(
    'SOCIAL_AUTH_VERIFYMYIDENTITY_OPENIDCONNECT_SECRET',
    'oauth2org@verifymyidentity-change-this-secret')
SOCIAL_AUTH_VERIFYMYIDENTITY_OPENIDCONNECT_SCOPE = ['openid', ]
SOCIAL_AUTH_VERIFYMYIDENTITY_OPENIDCONNECT_IGNORE_DEFAULT_SCOPE = True
SOCIAL_AUTH_VERIFYMYIDENTITY_OPENIDCONNECT_OIDC_ENDPOINT = env(
    'SOCIAL_AUTH_VERIFYMYIDENTITY_OPENIDCONNECT_OIDC_ENDPOINT',
    'http://verifymyidentity:8000')

# Set to True when using in a reverse proxy such as Gunicorn and Nginx
SOCIAL_AUTH_REDIRECT_IS_HTTPS = bool_env(
    env('SOCIAL_AUTH_REDIRECT_IS_HTTPS', False))

REMOTE_LOGOUT_ENDPOINT = "%s/api/v1/remote-logout" % (
    SOCIAL_AUTH_VERIFYMYIDENTITY_OPENIDCONNECT_OIDC_ENDPOINT)

DATE_INPUT_FORMATS = ['%Y-%m-%d']  # , '%d-%m-%Y']

LOGIN_REDIRECT_URL = 'home'
LOGIN_URL = '/social-auth/login/verifymyidentity-openidconnect'

EXTERNAL_AUTH_NAME = "Verify My Identity / OpenID Connect"

PROJECT_NAME = env('DJANGO_PROJECT_NAME', 'OAuth2org instance')


TOP_LEFT_TITLE = env('DJANGO_TOP_LEFT_TITLE',
                     'OAuth2.org')

APPLICATION_TITLE = env('DJANGO_APPLICATION_TITLE',
                        'OAuth2.org')
ORGANIZATION_TITLE = env(
    'DJANGO_ORGANIZATION_TITLE',
    'Videntity')

CONTACT_PHONE = env('CONTACT_PHONE', '1-888-871-1017')

CONTACT_EMAIL = env('CONTACT_EMAIL', 'sales@videntity.com')

KILLER_APP_URI = env('KILLER_APP_URI', 'https://app.microphr.com')

ORGANIZATION_URI = env('DJANGO_ORGANIZATION_URI', 'https://videntity.com')
POLICY_URI = env('DJANGO_POLICY_URI',
                 'https://example.com/privacy-policy-1.0.html')
POLICY_TITLE = env('DJANGO_POLICY_TITLE', 'Privacy Policy')
TOS_URI = env('DJANGO_TOS_URI',
              'https://example.com/terms-of-service-1.0.html')
TOS_TITLE = env('DJANGO_TOS_TITLE', 'Terms of Service')
TAG_LINE_1 = env('DJANGO_TAG_LINE_1', 'Share your health data')
TAG_LINE_2 = env('DJANGO_TAG_LINE_2',
                 'with applications, organizations, and people you trust.')
USER_DOCS_URI = env('USER_DOCS_URI', "https:/github.com/TransparentHealth/oauth2org")
USER_DOCS_TITLE = "User Documentation"
USER_DOCS = "User Docs"
# LINKS TO DOCS
DEVELOPER_DOCS_URI = "https:/github.com/TransparentHealth/oauth2org"
DEVELOPER_DOCS_TITLE = "Open Source"
DEVELOPER_DOCS = "Open Source"
DEFAULT_DISCLOSURE_TEXT = """
    This system may be monitored, recorded and
    subject to audit. Improper use of this system or
    its data may result in civil and criminal penalties.
    """

DISCLOSURE_TEXT = env('DISCLOSURE_TEXT', DEFAULT_DISCLOSURE_TEXT)

HOSTNAME_URL = env('HOSTNAME_URL', 'http://oauth2org:8001')

VMI_SIGNUP_URL = "%s/accounts/create-account/%s/?next=%s" % \
                 (SOCIAL_AUTH_VERIFYMYIDENTITY_OPENIDCONNECT_OIDC_ENDPOINT,
                  APPLICATION_TITLE,
                  HOSTNAME_URL)

# DOT +
GRANT_AUTHORIZATION_CODE = "authorization-code"
GRANT_IMPLICIT = "implicit"
# GRANT_PASSWORD = "password"
# GRANT_CLIENT_CREDENTIALS = "client-credentials"
GRANT_TYPES = (
    (GRANT_AUTHORIZATION_CODE, _("Authorization code")),
    # (GRANT_IMPLICIT, _("Implicit")),
    # (GRANT_PASSWORD, _("Resource owner password-based")),
    # (GRANT_CLIENT_CREDENTIALS, _("Client credentials")),
)


CALL_MEMBER = "member"
CALL_MEMBER_PLURAL = "members"
CALL_ORGANIZATION = "organization"
CALL_ORGANIZATION_PLURAL = "organizations"

DATA_SOURCE_TITLE = env('DATA_SOURCE_TITLE', 'Any State Health Information Exchange')
DATA_SOURCE_TITLE_SHORT = env('DATA_SOURCE_TITLE', 'Any state, USA')
# Default config for consumer/member/patient facing APIs.  Adjust for other use cases
PROTECTED_RESOURCE_TITLE = env(
    'PROTECTED_RESOURCE_TITLE',
    'read-only access to your personal health information')


SETTINGS_EXPORT = [
    'DEBUG',
    'HOSTNAME_URL',
    'ALLOWED_HOSTS',
    'APPLICATION_TITLE',
    'STATIC_URL',
    'STATIC_ROOT',
    'DEVELOPER_DOCS_URI',
    'DEVELOPER_DOCS_TITLE',
    'ORGANIZATION_TITLE',
    'PROJECT_NAME',
    'CONTACT_PHONE',
    'CONTACT_EMAIL',
    'POLICY_URI',
    'POLICY_TITLE',
    'DISCLOSURE_TEXT',
    'TOS_URI',
    'TOS_TITLE',
    'TAG_LINE_1',
    'TAG_LINE_2',
    'EXTERNAL_AUTH_NAME',
    'USER_DOCS_URI',
    'USER_DOCS',
    'DEVELOPER_DOCS',
    'USER_DOCS_TITLE',
    'VMI_SIGNUP_URL',
    'CALL_MEMBER',
    'CALL_MEMBER_PLURAL',
    'CALL_ORGANIZATION',
    'CALL_ORGANIZATION_PLURAL',
    'DATA_SOURCE_TITLE',
    'PROTECTED_RESOURCE_TITLE',
    'DATA_SOURCE_TITLE_SHORT',
    'TOP_LEFT_TITLE',
    'KILLER_APP_URI',
    'RESOURCES',
    'VITALSIGNS'
]


# These settings are for connection to InterSystems APIs for Health Information Exchanges
# Data is received as CCDA and converted to FHIR.  You don't need this information.



HIE_TOKEN_API_URI = env('HIE_TOKEN_API_URI',
                        'https://integration.example.com:6443/')
HIE_PATIENT_API_URI = env('HIE_PATIENT_API_URI',
                          'https://integration.example.com:5443')
HIE_PHRREGISTER_API_URI = "%s/PHRREGISTER" % (HIE_PATIENT_API_URI)
HIE_ACTIVATESTAGEDUSER_API_URI = "%s/ACTIVATESTAGEDUSER" % (
    HIE_PATIENT_API_URI)
HIE_CONSUMERDIRECTIVE_API_URI = "%s/CONSUMERDIRECTIVE" % (
    HIE_PATIENT_API_URI)
HIE_GETDOCUMENT_API_URI = "%s/GETDOCUMENT" % (HIE_PATIENT_API_URI)
HIE_WORKBENCH_USERNAME = env('HIE_WORKBENCH_USERNAME', '')
HIE_WORKBENCH_PASSWORD = env('HIE_WORKBENCH_PASSWORD', '')
HIE_BASIC_AUTH_PASSWORD = env('HIE_BASIC_AUTH_PASSWORD', '')
HIE_BASIC_AUTH_USERNAME = env('HIE_BASIC_AUTH_USERNAME', '')

HIE_CLIENT_CERT = env('HIE_CLIENT_CERT', """
-----BEGIN CERTIFICATE-----
replace with your cert or set the env var.
-----END CERTIFICATE-----""")

HIE_CLIENT_PRIVATE_KEY = env('HIE_CLIENT_PRIVATE_KEY', """
-----BEGIN PRIVATE KEY-----
replace with your private key or set the env var.
-----END PRIVATE KEY-----
""")


HIE_CLIENT_CERT_FILEPATH = env('HIE_CLIENT_CERT_FILEPATH', 'client-cert.pem')
HIE_CLIENT_PRIVATE_KEY_FILEPATH = env(
    'HIE_CLIENT_PRIVATE_KEY_FILEPATH', 'client-private-key.pem')

# End of InterSystems HIE settings


# CDA2FHIR is use to convert Intersystems CDA. At the time of this writing
# Intersystems doesn't have a usable FHIR interface.

# Should be operated behind a firewall and in ssl/https in production.
CDA2FHIR_SERVICE = env('CDA2FHIR_SERVICE',
                       'http://cda2fhirservice-env.example.com')
CDA2FHIR_SERVICE_URL = "%s/api/convert" % (CDA2FHIR_SERVICE)

# Expire in 30 minutes
SESSION_COOKIE_AGE = int(env('SESSION_COOKIE_AGE', int(30 * 60)))

# Expire when browser is closed.
SESSION_EXPIRE_AT_BROWSER_CLOSE = True
SESSION_COOKIE_SAMESITE = None


# FHIR Server to Proxy (Default) - with trailing slash on HAPI

DEFAULT_FHIR_SERVER = env('DEFAULT_FHIR_SERVER',
                          "http://fhir-test.sharemy.health:8080/fhir/baseDstu3/")

DEFAULT_FHIR_URL_PREFIX = env('DEFAULT_FHIR_URL_PREFIX', "/fhir/baseDstu3")


# Proxied requests will  have these URLs swapped.
DEFAULT_OUT_FHIR_SERVER = HOSTNAME_URL + DEFAULT_FHIR_URL_PREFIX


# DEFAULT_FHIR_SERVER = "http://fhir-test.sharemy.health:8080/fhir"
# DEFAULT_OUT_FHIR_SERVER = HOSTNAME_URL + "/fhir/R4"


FHIR_RESOURCES_SUPPORTED = (
    'Patient',
    'Observation',
    'Condition',
    'Medication',
    'MedicationStatement',
    'MedicationOrder',
    'AllergyIntolerance',
    'DiagnosticReport',
    'Procedure',
    'CarePlan',
    'Immunization',
    'Device',
    'Goal',
    'Coverage',
    'ExplanationOfBenefit')

DEFAULT_SAMPLE_FHIR_ID = "472"


# Backend FHIR server client credentials
# These may be used to connect to Microsoft Azure Healthcare APIs

BACKEND_FHIR_CLIENT_ID = env(
    'BACKEND_FHIR_CLIENT_ID', "change-me")
BACKEND_FHIR_CLIENT_SECRET = env(
    'BACKEND_FHIR_CLIENT_SECRET', "change-me")
BACKEND_FHIR_RESOURCE = env('BACKEND_FHIR_RESOURCE',
                            DEFAULT_FHIR_SERVER)
BACKEND_FHIR_TOKEN_ENDPOINT = env('BACKEND_FHIR_TOKEN_ENDPOINT',
                                  "https://login.microsoftonline.com/example1234/oauth2/token")


AWS_DEFAULT_REGION = env('AWS_DEFAULT_REGION', 'us-east-1')

# Blank means skip EC2.
EC2PARAMSTORE_4_ENVIRONMENT_VARIABLES = env(
    'EC2PARAMSTORE_4_ENVIRONMENT_VARIABLES', "EC2_PARAMSTORE")


RESOURCES = ['Account', 'ActivityDefinition', 'AllergyIntolerance', 'AdverseEvent', 'Appointment',
             'AppointmentResponse', 'AuditEvent', 'Basic', 'Binary', 'BodySite', 'Bundle',
             'CapabilityStatement', 'CarePlan', 'CareTeam', 'ChargeItem', 'Claim', 'ClaimResponse',
             'ClinicalImpression', 'CodeSystem', 'Communication', 'CommunicationRequest',
             'CompartmentDefinition', 'Composition', 'ConceptMap', 'Condition', 'Consent',
             'Contract', 'Coverage', 'DataElement', 'DetectedIssue', 'Device', 'DeviceComponent',
             'DeviceMetric', 'DeviceRequest', 'DeviceUseStatement', 'DiagnosticReport', 'DocumentManifest',
             'DocumentReference', 'EligibilityRequest', 'EligibilityResponse', 'Encounter', 'Endpoint',
             'EnrollmentRequest', 'EnrollmentResponse', 'EpisodeOfCare', 'ExpansionProfile',
             'ExplanationOfBenefit', 'FamilyMemberHistory', 'Flag', 'Goal', 'GraphDefinition',
             'Group', 'GuidanceResponse', 'HealthcareService', 'ImagingManifest', 'ImagingStudy',
             'Immunization', 'ImmunizationRecommendation', 'ImplementationGuide', 'Library', 'Linkage',
             'List', 'Location', 'Measure', 'MeasureReport', 'Media',
             'Medication', 'MedicationAdministration', 'MedicationDispense', 'MedicationRequest',
             'MedicationStatement', 'MessageDefinition', 'MessageHeader', 'NamingSystem',
             'NutritionOrder', 'Observation', 'OperationDefinition', 'OperationOutcome',
             'Organization', 'Parameters', 'Patient', 'PaymentNotice', 'PaymentReconciliation',
             'Person', 'PlanDefinition', 'Practitioner', 'PractitionerRole', 'Procedure',
             'ProcedureRequest', 'ProcessRequest', 'ProcessResponse', 'Provenance',
             'Questionnaire', 'QuestionnaireResponse', 'ReferralRequest', 'RelatedPerson',
             'RequestGroup', 'ResearchStudy', 'ResearchSubject', 'RiskAssessment',
             'Schedule', 'SearchParameter', 'Sequence', 'ServiceDefinition', 'Slot', 'Specimen',
             'StructureDefinition', 'StructureMap', 'Subscription', 'Substance', 'SupplyDelivery',
             'SupplyRequest', 'Task', 'TestScript', 'TestReport', 'ValueSet', 'VisionPrescription']

VITALSIGNS = ['3141-9', '8302-2', '39156-5',
              '8480-6', '8462-4', '8867-4', '8310-5', '9279-1']

VPC_ENV = env('VPC_ENV', "UNKNOWN")
ROLE_TYPE = env('ROLE_TYPE', "NOT_SET")

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'filters': {
        'require_debug_false': {
            '()': 'django.utils.log.RequireDebugFalse',
        },
        'require_debug_true': {
            '()': 'django.utils.log.RequireDebugTrue',
        },
    },
    'formatters': {
        'verbose': {
            'format': '%(process)-5d %(thread)d %(name)-50s env:' + VPC_ENV + ':' + ROLE_TYPE + ' %(levelname)-8s %(message)s'
        },
        'simple': {
            'format': '[%(asctime)s] %(name)s env:' + VPC_ENV + ':' + ROLE_TYPE + '%(levelname)s %(message)s',
            'datefmt': '%d/%b/%Y %H:%M:%S'
        },
    },
    'handlers': {
        'console': {
            'level': 'DEBUG',
            'filters': ['require_debug_true'],
            'class': 'logging.StreamHandler',
            'formatter': 'simple'
        },
        'logging.handlers.SysLogHandler': {
            'level': 'DEBUG',
            'class': 'logging.handlers.SysLogHandler',
            'facility': 'local7',
            'formatter': 'verbose',
            'address': '/dev/log',
        }
    },
    'loggers': {
        # root logger
        'smh': {
            'handlers': ['console', 'logging.handlers.SysLogHandler'],
            'propagate': True,
            'level': 'INFO',
            'formatter': 'verbose',
            'disabled': False,
        },
        'smh_debug': {
            'handlers': ['console', 'logging.handlers.SysLogHandler'],
            'level': 'DEBUG',
            'formatter': 'verbose',
            'propagate': True,
        },
    },
}
